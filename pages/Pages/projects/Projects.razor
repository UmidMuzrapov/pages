@inject HttpClient Http
@using pages
@page "/projects"

<div class="btn-group" role="group" aria-label="Basic radio toggle button group">
    <input type="radio" class="btn-check" name="btnradio" id="btnradio1" autocomplete="off" @onclick="@ShowJava">
    <label class="btn btn-outline-primary" for="btnradio1">Java</label>

    <input type="radio" class="btn-check" name="btnradio" id="btnradio2" autocomplete="off" @onclick="@ShowPython">
    <label class="btn btn-outline-primary" for="btnradio2">Python</label>

    <input type="radio" class="btn-check" name="btnradio" id="btnradio3" autocomplete="off" @onclick="@ShowOther">
    <label class="btn btn-outline-primary" for="btnradio3">Other</label>

    <input type="radio" class="btn-check" name="btnradio" id="btnradio4" autocomplete="off" @onclick="@ShowAll" checked>
    <label class="btn btn-outline-primary" for="btnradio4">All</label>
</div>

@if (_currentProjects == null || _currentProjects.Count==0)
{

}

else
{

    <div class="row-infinity-col3-disconnected">
        @*grid --> row-infinity-col3-disconnected*@
        @while (elementCount<elementMax)
        {
            if (elementCount<_currentProjects.Count)
            {
                <ProjectCard Project="_currentProjects[elementCount]" />
            }
            elementCount++;
        }


    </div>

    @if (elementMax<_currentProjects.Count)
    {
        <div class="button-margin-bottom">
            <span onclick="@LoadMore"><button type="button" class="btn btn-primary">Load more</button> </span>
        </div>
    }
}

@code
{
    private List<Project>? _projects;
    private bool showAll = true;
    private string? category = "";
    private int elementMax = 3;
    private int elementCount = 0;
    private List<Project>? _pythonProjects = new List<Project>();
    private List<Project>? _javaProjects = new List<Project>();
    private List<Project>? _otherProjects = new List<Project>();
    private List<Project>? _currentProjects = new List<Project>();

    protected override async Task OnInitializedAsync()
    {
        _projects=await Http.GetFromJsonAsync<List<Project>>("/pages/dataJSON/projects.json");
        _currentProjects=_projects;
        CountProjects();
    }
    private async Task ShowJava()
    {
        category="Java";
        showAll=false;
        _currentProjects=_javaProjects;
        await SetInitialCount();
    }

    private async Task ShowAll()
    {
        showAll=true;
        category="";
        _currentProjects=_projects;
        await SetInitialCount();

    }

    private async Task ShowPython()
    {
        category="Python";
        showAll=false;
        _currentProjects=_pythonProjects;
        await SetInitialCount();
    }

    private async Task ShowOther()
    {
        category="Other";
        showAll=false;
        _currentProjects=_otherProjects;
        await SetInitialCount();
    }

    private async Task SetInitialCount()
    {
        elementMax = 3;
        elementCount = 0;
    }
    private async Task LoadMore()
    {
        elementCount=0;
        elementMax=elementMax+3;
    }

    private async Task CountProjects()
    {

        foreach (var project in _projects)
        {
            if (project.Category.Equals("Python"))
            {
                _pythonProjects.Add(project);
            }

            else if (project.Category.Equals("Java"))
            {
                _javaProjects.Add(project);
            }

            else _otherProjects.Add(project);
        }

    }
}
